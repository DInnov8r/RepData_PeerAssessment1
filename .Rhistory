ls
setwd("~/git/SABR101x/Module5")
gs <- read.csv('./data/game_statistics.csv')
summary(gs)
size(gs)
?size
length(gs)
length(gs$date)
dim(gs)
gs$total_runs <- with(gs, gs$home_score + gs$visitor_score)
summary(gs)
total_time_data <- gs[c('game_minutes', 'total_runs', 'outs')]
require('lattice')
splom(total_time_data)
cor(game_minutes, outs)
cor(gs$game_minutes, gs$outs)
plot(gs$total_runs, gs$outs)
cor(gs$game_minutes, gs$outs)
cor(gs$game_minutes, gs$total_runs)
cor(gs$total_runs, gs$outs)
pm <- lm(gs$game_minutes ~ gs$total_runs + gs$outs)
summary(pm)
pm
abline(pm)
abline(pm)
pm <- lm(gs$game_minutes ~ (gs$total_runs + gs$outs))
abline(pm)
pm <- lm(gs$game_minutes ~ gs$total_runs + gs$outs)
abline(pm)
pm
gs$RedSox_playing <- with(gs, ifelse(gs$home == 'BOS' | gs$visitor == 'BOS', 1, 0))
RedSox_games <- gs[gs$RedSox_playing ==1,]
summary(RedSox_games)
summary(RedSox_games)
RedSox_games[date > 2008]
type(gs)
str(RedSox_games)
class(RedSox_games$date)
class(RedSox_games$date[0])
RedSox_games[RedSox_games$date > as.Date('12-31-2007')]
RedSox_games[as.Date(RedSox_games$date) > as.Date('12-31-2007')]
RedSox_games[as.Date(RedSox_games$date) > as.Date("12-31-2007")]
as.Date("12-31-2007")
RedSox_games[as.Date(RedSox_games$date) > as.Date("2007-12-31")]
RedSox_games[as.Date(RedSox_games$date) > as.Date("2007-12-31"),]
games_2008 <- RedSox_games[as.Date(RedSox_games$date) > as.Date("2007-12-31"),]
str(games_2008)
mean(games_2008$total_runs)
games_2008_ALL <- gs[as.Date(gs$date) > as.Date("2007-12-31"),]
mean(games_2008_ALL$total_runs)
hist(games_2008, breaks=40)
hist(games_2008$total_runs, breaks=40)
hist(RedSox_games$total_runs, breaks=40)
gs$BrianGorman <- with(gs, ifelse(gs$hp_ump_name == 'Brian Gorman', 1, 0))
gs$JimJoyce <- with(gs, ifelse(gs$hp_ump_name == 'Jim Joyce', 1, 0))
gs$DaleScott <- with(gs, ifelse(gs$hp_ump_name == 'Dale Scott', 1, 0))
gs$TimWelke <- with(gs, ifelse(gs$hp_ump_name == 'Tim Welke', 1, 0))
summary(gs)
BrianGorman_games <- gs[gs$BrianGorman == 1,]
summary(BrianGorman_games)
JimJoyce_games <- gs[gs$JimJoyce == 1,]
DaleScott_games <- gs[gs$DaleScott == 1,]
TimWelke_games <- gs[gs$TimWelke == 1,]
mean(BrianGorman_games$total_runs)
mean(JimJoyce_games$total_runs)
mean(DaleScott_games$total_runs)
mean(TimWelke_games$total_runs)
mean(gs$total_runs)
projected_runs <- lm(RedSox_games$total_runs ~ JimJoyce_games + DaleScott_games + TimWelke_games + BrianGorman_games)
projected_runs <- lm(gs$total_runs ~ RedSox_games$total_runs + JimJoyce_games$total_runs + DaleScott_games$total_runs + TimWelke_games$total_runs + BrianGorman_games$total_runs)
projected_runs <- lm(RedSox_games$total_runs ~ JimJoyce_games + DaleScott_games + TimWelke_games + BrianGorman_games)
projected_runs <- lm(RedSox_games$total_runs ~ JimJoyce_games$total_runs + DaleScott_games$total_runs + TimWelke_games$total_runs + BrianGorman_games$total_runs)
projected_runs <- lm(gs$total_runs ~ RedSox_games$total_runs + JimJoyce_games$total_runs + DaleScott_games$total_runs + TimWelke_games$total_runs + BrianGorman_games$total_runs, data=gs)
projected_runs <- lm(gs$total_runs ~ RedSox_games$total_runs + JimJoyce_games + DaleScott_games + TimWelke_games + BrianGorman_games, data=gs)
projected_runs <- lm(gs$total_runs ~ gs$RedSox_playing + JimJoyce_games + DaleScott_games + TimWelke_games + BrianGorman_games, data=gs)
projected_runs <- lm(gs$total_runs ~ gs$RedSox_playing + gs$JimJoyce + gs$DaleScott + gs$TimWelke + gs$BrianGorman_games)
projected_runs <- lm(gs$total_runs ~ gs$RedSox_playing + gs$JimJoyce + gs$DaleScott + gs$TimWelke + gs$BrianGorman)
projected_runs
confint(projected_runs)
rox <- read.csv('./data/coors_park_factors.csv')
park <- subset(rox, home == "COL")
away <- subset(rox, visitor == "COL")
park_ratio <- sum(park$home_hr + park$visitor_hr) / sum(park$home_ab + park$visitor_ab)
away_ratio <- sum(away$home_hr + away$visitor_hr) / sum(away$home_ab + away$visitor_ab)
park_ratio
100 * (park_ratio / away_ratio)
pf_stat_teams <- function(stat, data, season_year=2013) {
#To start, we will filter our data frame by the correct year.
data <- subset(data, year == season_year)
#We next build strings for accessing proper PF stat, followed by filtering out unnecessary columns.
home_stat = paste("home", stat, sep="_")
visitor_stat = paste("visitor", stat, sep="_")
pf_stat = paste("pf", stat, season_year, sep="_")
cols = c(home_stat, visitor_stat, "home_ab", "visitor_ab")
#We continue by separating by home/away as we did in the Rockies HR Park Factor for 2013, but now we group by team as well. Additionally, we calculate sums of desired stat and AB in this step.
park_sums <- ddply(data, .(home), colwise(sum, cols))
away_sums <- ddply(data, .(visitor), colwise(sum, cols))
#We now calculate stat/AB frequency ratios.
park_sums$park_ratio <- (park_sums[[home_stat]] + park_sums[[visitor_stat]]) / (park_sums[["home_ab"]] + park_sums[["visitor_ab"]])
away_sums$away_ratio <- (away_sums[[home_stat]] + away_sums[[visitor_stat]]) / (away_sums[["home_ab"]] + away_sums[["visitor_ab"]])
#We proceed by merging together park and visitor ratios. Notice how the merge() function and the by statement inside of it as a parameter behave like a JOIN and ON in SQL.
pf <- merge(park_sums, away_sums, by.x="home", by.y="visitor")
#Now, we calculate the ratio of ratios to get the final PF.
pf[[pf_stat]] <- with(pf, pf$park_ratio / pf$away_ratio)
#Finally, we clean up the dataframe, and return this version.
pf <- rename(pf, replace=c("home" = "team"))
pf <- subset(pf, select = c("team", pf_stat))
return(pf)
}
pf_all <- read.csv('./data/park_factors.csv')
pf_all <- within(pf_all, levels(home)[levels(home)=='FLO'] <- 'MIA')
pf_all <- within(pf_all, levels(visitor)[levels(visitor)=='FLO'] <- 'MIA')
hr_2013 <- pf_stat_teams("hr", pf_all, season_year=2013)
require(plyr)
pf_stat_teams <- function(stat, data, season_year=2013) {
#To start, we will filter our data frame by the correct year.
data <- subset(data, year == season_year)
#We next build strings for accessing proper PF stat, followed by filtering out unnecessary columns.
home_stat = paste("home", stat, sep="_")
visitor_stat = paste("visitor", stat, sep="_")
pf_stat = paste("pf", stat, season_year, sep="_")
cols = c(home_stat, visitor_stat, "home_ab", "visitor_ab")
#We continue by separating by home/away as we did in the Rockies HR Park Factor for 2013, but now we group by team as well. Additionally, we calculate sums of desired stat and AB in this step.
park_sums <- ddply(data, .(home), colwise(sum, cols))
away_sums <- ddply(data, .(visitor), colwise(sum, cols))
#We now calculate stat/AB frequency ratios.
park_sums$park_ratio <- (park_sums[[home_stat]] + park_sums[[visitor_stat]]) / (park_sums[["home_ab"]] + park_sums[["visitor_ab"]])
away_sums$away_ratio <- (away_sums[[home_stat]] + away_sums[[visitor_stat]]) / (away_sums[["home_ab"]] + away_sums[["visitor_ab"]])
#We proceed by merging together park and visitor ratios. Notice how the merge() function and the by statement inside of it as a parameter behave like a JOIN and ON in SQL.
pf <- merge(park_sums, away_sums, by.x="home", by.y="visitor")
#Now, we calculate the ratio of ratios to get the final PF.
pf[[pf_stat]] <- with(pf, pf$park_ratio / pf$away_ratio)
#Finally, we clean up the dataframe, and return this version.
pf <- rename(pf, replace=c("home" = "team"))
pf <- subset(pf, select = c("team", pf_stat))
return(pf)
}
pf_all <- read.csv('./data/park_factors.csv')
pf_all <- within(pf_all, levels(home)[levels(home)=='FLO'] <- 'MIA')
pf_all <- within(pf_all, levels(visitor)[levels(visitor)=='FLO'] <- 'MIA')
hr_2013 <- pf_stat_teams("hr", pf_all, season_year=2013)
hr_2013
#We proceed by merging together park and visitor ratios. Notice how the merge() function and the by statement inside of it as a parameter behave like a JOIN and ON in SQL.
pf_stat_teams <- function(stat, data, season_year=2013) {
#To start, we will filter our data frame by the correct year.
data <- subset(data, year == season_year)
#We next build strings for accessing proper PF stat, followed by filtering out unnecessary columns.
home_stat = paste("home", stat, sep="_")
visitor_stat = paste("visitor", stat, sep="_")
pf_stat = paste("pf", stat, season_year, sep="_")
cols = c(home_stat, visitor_stat, "home_ab", "visitor_ab")
#We continue by separating by home/away as we did in the Rockies HR Park Factor for 2013, but now we group by team as well. Additionally, we calculate sums of desired stat and AB in this step.
park_sums <- ddply(data, .(home), colwise(sum, cols))
away_sums <- ddply(data, .(visitor), colwise(sum, cols))
#We now calculate stat/AB frequency ratios.
park_sums$park_ratio <- (park_sums[[home_stat]] + park_sums[[visitor_stat]]) / (park_sums[["home_ab"]] + park_sums[["visitor_ab"]])
away_sums$away_ratio <- (away_sums[[home_stat]] + away_sums[[visitor_stat]]) / (away_sums[["home_ab"]] + away_sums[["visitor_ab"]])
#We proceed by merging together park and visitor ratios. Notice how the merge() function and the by statement inside of it as a parameter behave like a JOIN and ON in SQL.
pf <- merge(park_sums, away_sums, by.x="home", by.y="visitor")
#Now, we calculate the ratio of ratios to get the final PF.
pf[[pf_stat]] <- with(pf, 100 * pf$park_ratio / pf$away_ratio)
#Finally, we clean up the dataframe, and return this version.
pf <- rename(pf, replace=c("home" = "team"))
pf <- subset(pf, select = c("team", pf_stat))
return(pf)
}
pf_all <- read.csv('./data/park_factors.csv')
pf_all <- within(pf_all, levels(home)[levels(home)=='FLO'] <- 'MIA')
pf_all <- within(pf_all, levels(visitor)[levels(visitor)=='FLO'] <- 'MIA')
hr_2013 <- pf_stat_teams("hr", pf_all, season_year=2013)
hr_2013
head(pf_all)
2b_2013 <- pf_stat_teams("2b", pf_all, season_year=2010)
doubles_2013 <- pf_stat_teams("2b", pf_all, season_year=2010)
doubles_2013
?apply
apply(doubles_2013,1,min)
doubles_2010 <- pf_stat_teams("2b", pf_all, season_year=2010)
doubles_2010[with(doubles_2010, order(pf_2b_2010)),]
walks_2011 <- pf_stat_teams("bb", pf_all, season_year=2011)
walks_2011
walks_2011[with(walks_2011, order(pf_bb_2011)),]
?hist
?histogram
?qplot
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
?qplot
?ggplot2
walks_2011
qplot(walks_2011$pf_bb_2011)
setwd("~/git/SABR101x/Final")
source("corr.R")
corr_plot('SF', 'R', year_team)
corr_plot('AVG', 'R', year_team)
corr_plot('AVG', 'R', year_team)
corr_plot('SF', 'R', year_team)
corr_plot('SF', 'R', year_team)
source("corr.R")
corr_plot('SF', 'R', year_team)
corr_plot('AVG', 'R', year_team)
corr_plot('SLG', 'R', year_team)
corr_plot('OBP', 'R', year_team)
corr_plot('OPS', 'R', year_team)
corr_plot('linRBasic', 'R', year_team)
corr_plot('linRMore', 'R', year_team)
setwd("~/git/datasciencecoursera/Reproducible Research/RepData_PeerAssessment1")
clear
cat("\014")
?plot
?row.names
150 mod 100
150 + 100
150 % 100
150 %% 100
150 %/% 100
150 %% 100 / 5 +  150 %/% 100
150 %% 100 / 5 +  150 %/% 100 * 10
150 %% 100 / 5
150 %/% 100 * 10
100 %/% 100 * 10
0 %/% 100 * 10
100 %/% 100 * 10
100 %% 100 * 10
100 %/% 100 * 10
100 %% 100 * 12
150 %% 100 / 5 +  150 %/% 100 * 12
150 %% 100 / 5 +  150 %/% 100 * 12 + 1
350 %% 100 / 5 +  350 %/% 100 * 12 + 1
950 %% 100 / 5 +  950 %/% 100 * 12 + 1
935 %% 100 / 5 +  935 %/% 100 * 12 + 1
activity <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
require(lattice)
activity["date"] <- as.Date(activity$date, "%Y-%m-%d")
head(activity)
?reshape
r <- cast(activity, date ~ steps)
require(reshape)
install.packages("reshape")
require(reshape)
r <- cast(activity, date ~ steps)
head(r)
r <- cast(activity, steps ~ date)
head(r)
?cast
r <- cast(activity, steps ~ date, fill=mean)
r <- cast(activity, steps ~ date, mean)
head(r)
r <- cast(activity, steps ~ date, fill=30)
head(r)
r <- cast(activity, interval ~ date)
install.packages("reshape2")
require(reshape2)
r <- dcast(activity, interval ~ date, value.var = "steps")
head(r)
?dcast
r <- dcast(activity, interval ~ date, value.var = "steps")
r <- dcast(activity, interval ~ date, value.var = "steps", fill = function(y) {mean(y, na.rm=TRUE)})
r <- dcast(activity, interval ~ date, value.var = "steps")
head(r)
mean(r, na.rm = TRUE)
rowMeans(r, na.rm = TRUE)
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
head(r)
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
head(r)
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
?dcast
?wideToLong
?reshape
reshape2
?reshape2
r2 <- reshape(r, direction = "long")
r2 <- reshape(r, direction = "long", varying=col.names(r))
?column.names
r2 <- reshape(r, direction = "long", varying=colnames(r))
install.packages(lsr)
install.packages("lsr")
require(lsr)
r2 - wideToLong(r, within = c("steps"))
r2 <- wideToLong(r, within = c("steps"))
head(r2)
?wideToLong
r2 <- wideToLong(r, within = "steps")
r2 <- wideToLong(r, within = "steps", split=FALSE)
r2 <- wideToLong(r, within = "steps")
colnames(r)
r2 <- reshape(r, direction = "long", varying=colnames(r), idvar="interval")
varying <- list(date = colnames(r))
r2 <- reshape(r, direction = "long", varying=varying, idvar="interval")
r2 <- reshape(r, direction = "long", varying=varying, v.names="date" idvar="interval")
r2 <- reshape(r, direction = "long", varying=varying, v.names="date", idvar="interval")
r2 <- reshape(r, direction = "long", varying=varying, v.names=c("date"), idvar="interval")
r2 <- reshape(r, direction = "long", varying=varying, v.names=c("date"), idvar=c("interval")
)
r2 <- reshape(r, direction = "long", varying=varying, v.names=c("date"))
head(r2)
r2
head(r2)
r2[0:10,]
r2[0:100,]
r2[100:300,]
head(r2)
str(r)
r2 <- reshape(r, direction = "long", varying=c("date"), v.names=varying)
str(r)
dates <- colnames(r)
head(dates)
head(dates[2:])
head(dates(2:))
dates[2:]
dates[2:,]
dates[,2:]
dates
dates(2)
dates[2]
dates[2:]
dates[2-]
dates[2:n]
size(dates)
length(dates)
dates[2:length(dates)]
r2 <- reshape(r, direction = "long", varying=varying, v.names=c("date"), timevar="interval")
head(r2)
?reshape
r2 <- reshape(r, direction = "long", varying=varying, timevar="interval")
head(r2)
r2 <- reshape(r, direction = "long", varying=varying, v.names=c("interval"), timevar="date")
head(r2)
varying
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"))
head(r2)
r2
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=list(names(r)[2:length(names(r))]))
rep(list(names(r)[2:length(names(r))]), each=10)
head(rep(list(names(r)[2:length(names(r))]), each=10))
?rep
head(rep(list(names(r)[2:length(names(r))]), times=10))
c <- head(rep(list(names(r)[2:length(names(r))]), each=10))
dim(c)
length(c)
c
c[0]
c <- head(rep(names(r)[2:length(names(r))]), each=10))
c <- head(rep(names(r)[2:length(names(r))], each=10))
c
names(r)[2:length(names(r))]
c <- rep(names(r)[2:length(names(r))], each=10)
c
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=rep(names(r)[2:length(names(r))], each=288))
dim(r)
?reshape
r2 <- reshape(r, direction = "long", varying=list(rep(names(r)[2:length(names(r))], each=288)), v.names=c("steps"), timevar="date", idvar=c("interval"))
r2 <- reshape(r, direction = "long", varying=list(rep(names(r)[2:length(names(r))], each=288)), v.names=c("steps"), timevar="date", idvar=c("interval"), times=list(names(r)[2:length(names(r))]))
r2 <- reshape(r, direction = "long", varying=list(rep(names(r)[2:length(names(r))], each=288)), v.names=c("steps"), timevar="date", idvar=c("interval"))
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=rep(names(r)[2:length(names(r))], each=288))
names(r)[2:length(names(r))]
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=names(r)[2:length(names(r))])
head(r2)
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=names(r)[2:length(names(r))], new.row.names=NULL)
head(r2)
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=names(r)[2:length(names(r))], new.row.names=0)
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=names(r)[2:length(names(r))])
head(activity)
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=names(r)[2:length(names(r))], new.row.names=FALSE)
dim(activities)
dim(r)
dim(r)[0]
dim(r)[0,]
dim(r)[1]
dim(r)[2]
dim(activity)
dim(r2)
r2 <- reshape(r, direction = "long", varying=list(names(r)[2:length(names(r))]), v.names=c("steps"), timevar="date", idvar=c("interval"), times=names(r)[2:length(names(r))], new.row.names=1:dim(activity)[1])
head(r2)
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(activity, na.rm = TRUE))
r <- 0
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
r <- cast(activity, steps ~ date, fill=NA)
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
r <- cast(activity, steps ~ date, fill=0)
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
r <- cast(activity, steps ~ date)
head(r)
r <-
0
r
r <- cast(activity, steps ~ date)
r
r <- dcast(activity, interval ~ date, value.var = "steps", fill = rowMeans(r, na.rm = TRUE))
r
r <- cast(activity, steps ~ date)
r2["date"] <- as.Date(r2$date, "%Y-%m-%d")
head(r2)
day <- weekdays(r2$date)
head(day)
day
r2[weekdays(r2$date) == "Saturday",]
r2[,"Weekday"] <- weekday(r2$date)
r2[,"Weekday"] <- weekdays(r2$date)
head(r2)
r2[,"Weekend"] <- r2$Weekday %in% c("Saturday", "Sunday")
head(r2)
r2
r2[r2$Weekend==TRUE,]
aggregate(steps ~ interval, data = r2[r2$Weekend==TRUE,], mean)
r2[r2$Weekday %in% c("Saturday", "Sunday"), "DayType"] <- "Weekend"
head(r2)
r2
r2[!(r2$Weekday %in% c("Saturday", "Sunday")), "DayType"] <- "Weekday"
head(r2)
?xyplot
?dcast
?cast
?hist
source('~/.active-rstudio-document', echo=TRUE)
?hist
source('~/.active-rstudio-document', echo=TRUE)
?hist
tt <- c(1,1,1,3,3,2,3,5,6,7,7,9,10,10,4,4,8,9,8,2)
hist(tt)
hist(tt, breaks=10)
hist(tt)
hist(tt, breaks=5)
hist(tt, breaks=6)
hist(tt, breaks=8)
hist(tt, breaks=20)
hist(tt, breaks=10)
tt <- c(1,1,1,3,3,2,3,5,6,7,7,9,10,10,6,6,8,9,8,2)
hist(tt, breaks=10)
hist(tt, breaks=11)
hist(tt, breaks=12)
hist(tt, breaks=5)
hist(tt, breaks=10)
order(tt)
tt
tt[10]
tt[11]
tt[12]
tt[13]
?order
sort.list(tt)
tt
c(1,1,1,3,3,2,3,5,6,7,7,9,10,10,6,6,8,9,8,2)
order(c(1,1,1,3,3,2,3,5,6,7,7,9,10,10,6,6,8,9,8,2))
tt[order(tt)]
hist(tt, breaks=10)
table(tt)
?table
?hist
